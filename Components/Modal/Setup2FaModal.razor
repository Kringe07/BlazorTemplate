@using ProjectName.DataAccess.Repository;

@inject AuthenticationService AuthService


@if (!string.IsNullOrEmpty(QrCodeImage))
{
    <p>Scan de onderstaande QR-code met Google Authenticator op je telefoon:</p>
    <img src="data:image/png;base64,@QrCodeImage" class="img-thumbnail mx-auto d-block w-50 h-50" />
    <br />
    <p>Als u de QR-code niet kunt scannen, kunt u de volgende sleutel handmatig invoeren in de Google Authenticator-app:</p>
    <strong class="mx-auto d-block m-3">@SecretKey</strong>
}
else
{
    <p>Generating QR code...</p>
}
<input type="text" @bind="OtpCode" class="form-control m-3" placeholder="Enter code" />
<p class="text-danger text-center mx-auto d-block">@ValidationMessage</p>
<button class="btn btn-primary btn-lg w-50 mx-auto d-block m-3 " @onclick="ValidateCode">Submit</button>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter] public required string Email { get; set; }
    private string QrCodeImage = string.Empty;
    private string SecretKey = string.Empty;
    private string ValidationMessage = string.Empty;
    private string OtpCode = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        SecretKey = AuthService.GenerateSecretKey();
        string qrCodeUri = AuthService.GenerateQrCodeUri(Email, SecretKey);
        QrCodeImage = AuthService.GenerateQrCodeImage(qrCodeUri);
        await AuthService.EnableTwoFactorAuthenticationAsync(Email, SecretKey);
    }
    private async Task ValidateCode()
    {
        //string secretKey = await AuthService.GetUserSecretKeyAsync(Email);

        if (AuthService.ValidateOtpCode(OtpCode, SecretKey))
        {
            await BlazoredModal.CloseAsync(ModalResult.Ok());
        }
        else
        {
            ValidationMessage = "Ongeldige code. Probeer het opnieuw.";
        }
    }
    private async Task Ok() => await BlazoredModal.CloseAsync(ModalResult.Ok());
}