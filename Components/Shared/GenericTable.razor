@using System.Drawing
@using ProjectName.DataAccess.Entities
@typeparam T


<div class="header-container">
    <h2 class="header-text">@Title</h2>
    @if (ErrorMessage != string.Empty)
    {
        <ErrorMessage Message="@ErrorMessage"></ErrorMessage>
    }
    <div class="searchadd-container">
            @if (SearchFilter != null)
            {
                <div class="searchbar-container">
                    <div class="icon-container">
                        <span class="material-symbols-outlined">search</span>
                    </div>
                    <input type="text" placeholder="Search..." value="@SearchTerm" @oninput="e => Filter(e.Value!.ToString())" class="search-bar"/>
                    <div class="icon-container">
                        @if (ShowDisabled)
                        {
                            <span title="Filter disabled" @onclick="ToggleShowDisabled" class="material-symbols-outlined">filter_list</span>
                        }
                        else
                        {
                            <span title="Show disabled" @onclick="ToggleShowDisabled" class="material-symbols-outlined">filter_list_off</span>
                        }
                    </div>
                </div>
            }
        <AuthorizeView Roles="@OnAdRoleType.ToString()">
            @if (!DisableOnAdd && OnAdd != null)
            {
                <div class="add-container" @onclick="OnAdd">
                    <span class="material-symbols-outlined">add</span>
                    <h2 class="header-text">Add</h2>
                </div>
            }
        </AuthorizeView>
    </div>
</div>

<div class="center">
    <table>
        <thead>
        <tr>
            @foreach (var column in Columns)
            {
                <th>@column.Title</th>
            }
        </tr>
        </thead>
        <tbody>
        @if (PageError != string.Empty)
        {
        <tr>
            <td colspan="@Columns.Count" class="empty-table">
                <div class="card-content">
                    <img width="300" height="300" src="imgs/railgun.gif" alt="Error" />
                    <ErrorMessage FontSize="24" Message="@PageError"></ErrorMessage>
                </div>
            </td>
        </tr>
        }
        else if (!FilteredItems.Any())
        {
            <tr>
                <td colspan="@Columns.Count" class="empty-table">
                    <div class="card-content">
                        <img width="300" height="300" src="imgs/railgun.gif" alt="No items" />
                        <p>No items</p>
                    </div>
                </td>
            </tr>
        }
        else
        {
            @foreach (var item in FilteredItems)
            {
                <tr @onclick="() => OnClick?.Invoke(item)">
                    @foreach (var column in Columns)
                    {
                        switch (column)
                        {
                            case TextColumn<T> textColumn:
                            {
                                if (item is IArchivableEntity { IsArchived : false })
                                {
                                    <td style="background-color: #aca9a9">@textColumn.Data(item)</td>
                                }
                                else
                                {
                                    <td>@textColumn.Data(item)</td>
                                }
                                break;   
                            }
                            case ButtonColumn<T> buttonColumn:
                                <td @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                    <button style="background-color: @(ColorTranslator.ToHtml(buttonColumn.Color(item)))"
                                            class="button"
                                            @onclick="@(async () => await buttonColumn.Function(item))">
                                        @(buttonColumn.ButtonName?.Invoke(item) ?? buttonColumn.Title)
                                    </button>
                                </td>
                                break;
                        }
                    }
                </tr>
            }
        }
        </tbody>
    </table>
</div>